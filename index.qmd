---
title: CRAN deadlines
knitr:
  opts_chunk: 
    echo: false
---

```{r}
gha::knitr_time_chunks()
```

```{r}
#| label: setup

# Good idea to supply an informative label for every chunk because that
# way we get informal logging via the knitr progress bar

library(dplyr, warn.conflicts = FALSE)
library(glue)
library(reactable)

recursive_revdeps <- function(pkgs) {
  tools::package_dependencies(pkgs, reverse = TRUE, recursive = TRUE)
}
glue_bullets <- function(x, env = parent.frame()) {
  glue_collapse(paste0("* ", glue(x, .envir = env)), "\n")
}
status_factor <- function(x) {
  factor(x, c("FAILURE", "ERROR", "WARNING", "NOTE"))
}
```

```{r}
#| label: read-cran-data
#| cache: false

# Going to be iterating on this report a bunch, and this chunk takes a 
# relatively long time to run, so it makes sense to cache it, even though
# we won't ever deploy that cache
cran_db <- as_tibble(tools::CRAN_package_db())
cran_checks <- as_tibble(tools::CRAN_check_details())
cran_results <- as_tibble(tools::CRAN_check_results())
```

```{r}
#| label: data-processing
has_deadline <- cran_db |> 
  filter(!is.na(Deadline)) |> 
  select(Package, Deadline, Maintainer) |> 
  mutate(
    Deadline = as.Date(Deadline),
    Maintainer = gsub(" <.*?>", "", Maintainer),
    Dependencies = lengths(recursive_revdeps(Package))
  ) |>
  arrange(Deadline)
gha::gha_notice("Found {nrow(has_deadline)} packages with deadlines")
# Useful to record a "change" date so we (a) see it in our commit history
# and (b) ensure that our cron job keeps running, as it will shut off after
# 60 days of no repo activity
writeLines(as.character(max(has_deadline$Deadline)), "deadline.txt")

deadline_details <- cran_checks |>
  semi_join(has_deadline, join_by(Package)) |>
  filter(Status != "OK") |>
  mutate(Status = status_factor(Status))
gha::gha_notice("Found {nrow(deadline_details)} details for {n_distinct(deadline_details$Package)} packages")

deadline_reasons <- deadline_details |>
  distinct(Package, Status, Check) |>
  arrange(Package, Status)
gha::gha_notice("Found {nrow(deadline_reasons)} reasons")

deadline_flavours <- deadline_details |>
  distinct(Package, Status, Flavor) |>
  arrange(Package, Status)
gha::gha_notice("Found {nrow(deadline_flavours)} flavours")
```

```{r}
#| label: generate-html

Sys.sleep(0.5) # just to illustrate interleaving problem

bullet_reasons <- deadline_reasons |> 
  summarise(
    reasons = glue_bullets("**{Status}**: {Check} "),
    .by = Package
  )

bullet_flavours <- deadline_flavours |> 
  mutate(url = glue(
    "https://www.r-project.org/nosvn/R.check/{Flavor}/{Package}-00check.html"
  )) |>
  summarise(
    flavours = glue_bullets("[{Flavor}]({url}): {Status}"),
    .by = Package
  )

table <- has_deadline |>
  left_join(bullet_reasons, join_by(Package)) |>
  left_join(bullet_flavours, join_by(Package)) |>
  mutate(
    Package = glue(
      "<a href='https://cran.r-project.org/web/checks/check_results_{Package}.html'>{Package}</a>"
    ),
    details = paste0("Reasons:\n", reasons, "\n\nFavours:\n", flavours),
    .keep = "unused"
  ) |>
  mutate(
    details = lapply(details, commonmark::markdown_html) 
  )
```

There are currently `r nrow(has_deadline)` packages at risk for removal from CRAN if not fixed by the specified deadlines:

```{r}
#| label: reactable
reactable(
  table |> select(-details),
  details = colDef(
    details = function(index) table$details[[index]],
    html = TRUE
  ),
  filterable = TRUE, 
  columns = list(Package = colDef(html = TRUE)),
  defaultPageSize = 25
)
```

(Source code for this file can be found at <https://github.com/hadley/cran-deadlines>)
